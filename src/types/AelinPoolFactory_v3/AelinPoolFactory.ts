// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreatePool extends ethereum.Event {
  get params(): CreatePool__Params {
    return new CreatePool__Params(this);
  }
}

export class CreatePool__Params {
  _event: CreatePool;

  constructor(event: CreatePool) {
    this._event = event;
  }

  get poolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get purchaseTokenCap(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get purchaseToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get duration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get sponsorFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get sponsor(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get purchaseDuration(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get hasAllowList(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }
}

export class AelinPoolFactory extends ethereum.SmartContract {
  static bind(address: Address): AelinPoolFactory {
    return new AelinPoolFactory("AelinPoolFactory", address);
  }

  AELIN_DEAL_LOGIC(): Address {
    let result = super.call(
      "AELIN_DEAL_LOGIC",
      "AELIN_DEAL_LOGIC():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_AELIN_DEAL_LOGIC(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "AELIN_DEAL_LOGIC",
      "AELIN_DEAL_LOGIC():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  AELIN_POOL_LOGIC(): Address {
    let result = super.call(
      "AELIN_POOL_LOGIC",
      "AELIN_POOL_LOGIC():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_AELIN_POOL_LOGIC(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "AELIN_POOL_LOGIC",
      "AELIN_POOL_LOGIC():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  AELIN_REWARDS(): Address {
    let result = super.call("AELIN_REWARDS", "AELIN_REWARDS():(address)", []);

    return result[0].toAddress();
  }

  try_AELIN_REWARDS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "AELIN_REWARDS",
      "AELIN_REWARDS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createPool(
    _name: string,
    _symbol: string,
    _purchaseTokenCap: BigInt,
    _purchaseToken: Address,
    _duration: BigInt,
    _sponsorFee: BigInt,
    _purchaseDuration: BigInt,
    _allowList: Array<Address>,
    _allowListAmounts: Array<BigInt>
  ): Address {
    let result = super.call(
      "createPool",
      "createPool(string,string,uint256,address,uint256,uint256,uint256,address[],uint256[]):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_purchaseTokenCap),
        ethereum.Value.fromAddress(_purchaseToken),
        ethereum.Value.fromUnsignedBigInt(_duration),
        ethereum.Value.fromUnsignedBigInt(_sponsorFee),
        ethereum.Value.fromUnsignedBigInt(_purchaseDuration),
        ethereum.Value.fromAddressArray(_allowList),
        ethereum.Value.fromUnsignedBigIntArray(_allowListAmounts)
      ]
    );

    return result[0].toAddress();
  }

  try_createPool(
    _name: string,
    _symbol: string,
    _purchaseTokenCap: BigInt,
    _purchaseToken: Address,
    _duration: BigInt,
    _sponsorFee: BigInt,
    _purchaseDuration: BigInt,
    _allowList: Array<Address>,
    _allowListAmounts: Array<BigInt>
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPool",
      "createPool(string,string,uint256,address,uint256,uint256,uint256,address[],uint256[]):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_purchaseTokenCap),
        ethereum.Value.fromAddress(_purchaseToken),
        ethereum.Value.fromUnsignedBigInt(_duration),
        ethereum.Value.fromUnsignedBigInt(_sponsorFee),
        ethereum.Value.fromUnsignedBigInt(_purchaseDuration),
        ethereum.Value.fromAddressArray(_allowList),
        ethereum.Value.fromUnsignedBigIntArray(_allowListAmounts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _aelinPoolLogic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _aelinDealLogic(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _aelinRewards(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _purchaseTokenCap(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _purchaseToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _duration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _sponsorFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _purchaseDuration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _allowList(): Array<Address> {
    return this._call.inputValues[7].value.toAddressArray();
  }

  get _allowListAmounts(): Array<BigInt> {
    return this._call.inputValues[8].value.toBigIntArray();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
