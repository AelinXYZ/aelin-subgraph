// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PoolCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("purchaseTokenCap", Value.fromBigInt(BigInt.zero()));
    this.set("purchaseToken", Value.fromBytes(Bytes.empty()));
    this.set("purchaseTokenSymbol", Value.fromString(""));
    this.set("duration", Value.fromBigInt(BigInt.zero()));
    this.set("sponsorFee", Value.fromBigInt(BigInt.zero()));
    this.set("sponsor", Value.fromBytes(Bytes.empty()));
    this.set("purchaseDuration", Value.fromBigInt(BigInt.zero()));
    this.set("purchaseExpiry", Value.fromBigInt(BigInt.zero()));
    this.set("purchaseTokenDecimals", Value.fromI32(0));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("hasAllowList", Value.fromBoolean(false));
    this.set("poolStatus", Value.fromString(""));
    this.set("contributions", Value.fromBigInt(BigInt.zero()));
    this.set("totalSupply", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolCreated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolCreated", id.toString(), this);
    }
  }

  static load(id: string): PoolCreated | null {
    return changetype<PoolCreated | null>(store.get("PoolCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get purchaseTokenCap(): BigInt {
    let value = this.get("purchaseTokenCap");
    return value!.toBigInt();
  }

  set purchaseTokenCap(value: BigInt) {
    this.set("purchaseTokenCap", Value.fromBigInt(value));
  }

  get purchaseToken(): Bytes {
    let value = this.get("purchaseToken");
    return value!.toBytes();
  }

  set purchaseToken(value: Bytes) {
    this.set("purchaseToken", Value.fromBytes(value));
  }

  get purchaseTokenSymbol(): string {
    let value = this.get("purchaseTokenSymbol");
    return value!.toString();
  }

  set purchaseTokenSymbol(value: string) {
    this.set("purchaseTokenSymbol", Value.fromString(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value!.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get sponsorFee(): BigInt {
    let value = this.get("sponsorFee");
    return value!.toBigInt();
  }

  set sponsorFee(value: BigInt) {
    this.set("sponsorFee", Value.fromBigInt(value));
  }

  get sponsor(): Bytes {
    let value = this.get("sponsor");
    return value!.toBytes();
  }

  set sponsor(value: Bytes) {
    this.set("sponsor", Value.fromBytes(value));
  }

  get purchaseDuration(): BigInt {
    let value = this.get("purchaseDuration");
    return value!.toBigInt();
  }

  set purchaseDuration(value: BigInt) {
    this.set("purchaseDuration", Value.fromBigInt(value));
  }

  get purchaseExpiry(): BigInt {
    let value = this.get("purchaseExpiry");
    return value!.toBigInt();
  }

  set purchaseExpiry(value: BigInt) {
    this.set("purchaseExpiry", Value.fromBigInt(value));
  }

  get purchaseTokenDecimals(): i32 {
    let value = this.get("purchaseTokenDecimals");
    return value!.toI32();
  }

  set purchaseTokenDecimals(value: i32) {
    this.set("purchaseTokenDecimals", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get hasAllowList(): boolean {
    let value = this.get("hasAllowList");
    return value!.toBoolean();
  }

  set hasAllowList(value: boolean) {
    this.set("hasAllowList", Value.fromBoolean(value));
  }

  get poolStatus(): string {
    let value = this.get("poolStatus");
    return value!.toString();
  }

  set poolStatus(value: string) {
    this.set("poolStatus", Value.fromString(value));
  }

  get contributions(): BigInt {
    let value = this.get("contributions");
    return value!.toBigInt();
  }

  set contributions(value: BigInt) {
    this.set("contributions", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get dealAddress(): Bytes | null {
    let value = this.get("dealAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set dealAddress(value: Bytes | null) {
    if (!value) {
      this.unset("dealAddress");
    } else {
      this.set("dealAddress", Value.fromBytes(<Bytes>value));
    }
  }
}

export class TotalPoolsCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TotalPoolsCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TotalPoolsCreated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TotalPoolsCreated", id.toString(), this);
    }
  }

  static load(id: string): TotalPoolsCreated | null {
    return changetype<TotalPoolsCreated | null>(
      store.get("TotalPoolsCreated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class PurchasePoolToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("purchaser", Value.fromBytes(Bytes.empty()));
    this.set("poolAddress", Value.fromBytes(Bytes.empty()));
    this.set("purchaseTokenAmount", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PurchasePoolToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PurchasePoolToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PurchasePoolToken", id.toString(), this);
    }
  }

  static load(id: string): PurchasePoolToken | null {
    return changetype<PurchasePoolToken | null>(
      store.get("PurchasePoolToken", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get purchaser(): Bytes {
    let value = this.get("purchaser");
    return value!.toBytes();
  }

  set purchaser(value: Bytes) {
    this.set("purchaser", Value.fromBytes(value));
  }

  get poolAddress(): Bytes {
    let value = this.get("poolAddress");
    return value!.toBytes();
  }

  set poolAddress(value: Bytes) {
    this.set("poolAddress", Value.fromBytes(value));
  }

  get purchaseTokenAmount(): BigInt {
    let value = this.get("purchaseTokenAmount");
    return value!.toBigInt();
  }

  set purchaseTokenAmount(value: BigInt) {
    this.set("purchaseTokenAmount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class WithdrawFromPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("purchaser", Value.fromBytes(Bytes.empty()));
    this.set("poolAddress", Value.fromBytes(Bytes.empty()));
    this.set("purchaseTokenAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WithdrawFromPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WithdrawFromPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WithdrawFromPool", id.toString(), this);
    }
  }

  static load(id: string): WithdrawFromPool | null {
    return changetype<WithdrawFromPool | null>(
      store.get("WithdrawFromPool", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get purchaser(): Bytes {
    let value = this.get("purchaser");
    return value!.toBytes();
  }

  set purchaser(value: Bytes) {
    this.set("purchaser", Value.fromBytes(value));
  }

  get poolAddress(): Bytes {
    let value = this.get("poolAddress");
    return value!.toBytes();
  }

  set poolAddress(value: Bytes) {
    this.set("poolAddress", Value.fromBytes(value));
  }

  get purchaseTokenAmount(): BigInt {
    let value = this.get("purchaseTokenAmount");
    return value!.toBigInt();
  }

  set purchaseTokenAmount(value: BigInt) {
    this.set("purchaseTokenAmount", Value.fromBigInt(value));
  }
}

export class AcceptDeal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("purchaser", Value.fromBytes(Bytes.empty()));
    this.set("poolAddress", Value.fromBytes(Bytes.empty()));
    this.set("dealAddress", Value.fromBytes(Bytes.empty()));
    this.set("sponsorFee", Value.fromBigInt(BigInt.zero()));
    this.set("aelinFee", Value.fromBigInt(BigInt.zero()));
    this.set("poolTokenAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AcceptDeal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AcceptDeal entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AcceptDeal", id.toString(), this);
    }
  }

  static load(id: string): AcceptDeal | null {
    return changetype<AcceptDeal | null>(store.get("AcceptDeal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get purchaser(): Bytes {
    let value = this.get("purchaser");
    return value!.toBytes();
  }

  set purchaser(value: Bytes) {
    this.set("purchaser", Value.fromBytes(value));
  }

  get poolAddress(): Bytes {
    let value = this.get("poolAddress");
    return value!.toBytes();
  }

  set poolAddress(value: Bytes) {
    this.set("poolAddress", Value.fromBytes(value));
  }

  get dealAddress(): Bytes {
    let value = this.get("dealAddress");
    return value!.toBytes();
  }

  set dealAddress(value: Bytes) {
    this.set("dealAddress", Value.fromBytes(value));
  }

  get sponsorFee(): BigInt {
    let value = this.get("sponsorFee");
    return value!.toBigInt();
  }

  set sponsorFee(value: BigInt) {
    this.set("sponsorFee", Value.fromBigInt(value));
  }

  get aelinFee(): BigInt {
    let value = this.get("aelinFee");
    return value!.toBigInt();
  }

  set aelinFee(value: BigInt) {
    this.set("aelinFee", Value.fromBigInt(value));
  }

  get poolTokenAmount(): BigInt {
    let value = this.get("poolTokenAmount");
    return value!.toBigInt();
  }

  set poolTokenAmount(value: BigInt) {
    this.set("poolTokenAmount", Value.fromBigInt(value));
  }
}

export class DealCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("poolAddress", Value.fromBytes(Bytes.empty()));
    this.set("sponsor", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DealCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DealCreated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DealCreated", id.toString(), this);
    }
  }

  static load(id: string): DealCreated | null {
    return changetype<DealCreated | null>(store.get("DealCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get poolAddress(): Bytes {
    let value = this.get("poolAddress");
    return value!.toBytes();
  }

  set poolAddress(value: Bytes) {
    this.set("poolAddress", Value.fromBytes(value));
  }

  get sponsor(): Bytes {
    let value = this.get("sponsor");
    return value!.toBytes();
  }

  set sponsor(value: Bytes) {
    this.set("sponsor", Value.fromBytes(value));
  }
}

export class DealDetail extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("underlyingDealToken", Value.fromBytes(Bytes.empty()));
    this.set("underlyingDealTokenSymbol", Value.fromString(""));
    this.set("underlyingDealTokenDecimals", Value.fromI32(0));
    this.set("purchaseTokenTotalForDeal", Value.fromBigInt(BigInt.zero()));
    this.set("underlyingDealTokenTotal", Value.fromBigInt(BigInt.zero()));
    this.set("vestingPeriod", Value.fromBigInt(BigInt.zero()));
    this.set("vestingCliff", Value.fromBigInt(BigInt.zero()));
    this.set("proRataRedemptionPeriod", Value.fromBigInt(BigInt.zero()));
    this.set("openRedemptionPeriod", Value.fromBigInt(BigInt.zero()));
    this.set("holder", Value.fromBytes(Bytes.empty()));
    this.set("isDealFunded", Value.fromBoolean(false));
    this.set("holderFundingExpiration", Value.fromBigInt(BigInt.zero()));
    this.set("holderFundingDuration", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DealDetail entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DealDetail entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DealDetail", id.toString(), this);
    }
  }

  static load(id: string): DealDetail | null {
    return changetype<DealDetail | null>(store.get("DealDetail", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingDealToken(): Bytes {
    let value = this.get("underlyingDealToken");
    return value!.toBytes();
  }

  set underlyingDealToken(value: Bytes) {
    this.set("underlyingDealToken", Value.fromBytes(value));
  }

  get underlyingDealTokenSymbol(): string {
    let value = this.get("underlyingDealTokenSymbol");
    return value!.toString();
  }

  set underlyingDealTokenSymbol(value: string) {
    this.set("underlyingDealTokenSymbol", Value.fromString(value));
  }

  get underlyingDealTokenDecimals(): i32 {
    let value = this.get("underlyingDealTokenDecimals");
    return value!.toI32();
  }

  set underlyingDealTokenDecimals(value: i32) {
    this.set("underlyingDealTokenDecimals", Value.fromI32(value));
  }

  get purchaseTokenTotalForDeal(): BigInt {
    let value = this.get("purchaseTokenTotalForDeal");
    return value!.toBigInt();
  }

  set purchaseTokenTotalForDeal(value: BigInt) {
    this.set("purchaseTokenTotalForDeal", Value.fromBigInt(value));
  }

  get underlyingDealTokenTotal(): BigInt {
    let value = this.get("underlyingDealTokenTotal");
    return value!.toBigInt();
  }

  set underlyingDealTokenTotal(value: BigInt) {
    this.set("underlyingDealTokenTotal", Value.fromBigInt(value));
  }

  get vestingPeriod(): BigInt {
    let value = this.get("vestingPeriod");
    return value!.toBigInt();
  }

  set vestingPeriod(value: BigInt) {
    this.set("vestingPeriod", Value.fromBigInt(value));
  }

  get vestingCliff(): BigInt {
    let value = this.get("vestingCliff");
    return value!.toBigInt();
  }

  set vestingCliff(value: BigInt) {
    this.set("vestingCliff", Value.fromBigInt(value));
  }

  get proRataRedemptionPeriod(): BigInt {
    let value = this.get("proRataRedemptionPeriod");
    return value!.toBigInt();
  }

  set proRataRedemptionPeriod(value: BigInt) {
    this.set("proRataRedemptionPeriod", Value.fromBigInt(value));
  }

  get proRataRedemptionPeriodStart(): BigInt | null {
    let value = this.get("proRataRedemptionPeriodStart");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proRataRedemptionPeriodStart(value: BigInt | null) {
    if (!value) {
      this.unset("proRataRedemptionPeriodStart");
    } else {
      this.set("proRataRedemptionPeriodStart", Value.fromBigInt(<BigInt>value));
    }
  }

  get openRedemptionPeriod(): BigInt {
    let value = this.get("openRedemptionPeriod");
    return value!.toBigInt();
  }

  set openRedemptionPeriod(value: BigInt) {
    this.set("openRedemptionPeriod", Value.fromBigInt(value));
  }

  get holder(): Bytes {
    let value = this.get("holder");
    return value!.toBytes();
  }

  set holder(value: Bytes) {
    this.set("holder", Value.fromBytes(value));
  }

  get isDealFunded(): boolean {
    let value = this.get("isDealFunded");
    return value!.toBoolean();
  }

  set isDealFunded(value: boolean) {
    this.set("isDealFunded", Value.fromBoolean(value));
  }

  get holderFundingExpiration(): BigInt {
    let value = this.get("holderFundingExpiration");
    return value!.toBigInt();
  }

  set holderFundingExpiration(value: BigInt) {
    this.set("holderFundingExpiration", Value.fromBigInt(value));
  }

  get holderFundingDuration(): BigInt {
    let value = this.get("holderFundingDuration");
    return value!.toBigInt();
  }

  set holderFundingDuration(value: BigInt) {
    this.set("holderFundingDuration", Value.fromBigInt(value));
  }
}

export class SetSponsor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sponsor", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SetSponsor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SetSponsor entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SetSponsor", id.toString(), this);
    }
  }

  static load(id: string): SetSponsor | null {
    return changetype<SetSponsor | null>(store.get("SetSponsor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sponsor(): Bytes {
    let value = this.get("sponsor");
    return value!.toBytes();
  }

  set sponsor(value: Bytes) {
    this.set("sponsor", Value.fromBytes(value));
  }
}

export class SetHolder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("holder", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SetHolder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SetHolder entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SetHolder", id.toString(), this);
    }
  }

  static load(id: string): SetHolder | null {
    return changetype<SetHolder | null>(store.get("SetHolder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get holder(): Bytes {
    let value = this.get("holder");
    return value!.toBytes();
  }

  set holder(value: Bytes) {
    this.set("holder", Value.fromBytes(value));
  }
}

export class AelinToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("decimals", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AelinToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AelinToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AelinToken", id.toString(), this);
    }
  }

  static load(id: string): AelinToken | null {
    return changetype<AelinToken | null>(store.get("AelinToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class DealFullyFunded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolAddress", Value.fromBytes(Bytes.empty()));
    this.set("proRataRedemptionStart", Value.fromBigInt(BigInt.zero()));
    this.set("openRedemptionStart", Value.fromBigInt(BigInt.zero()));
    this.set("proRataRedemptionExpiry", Value.fromBigInt(BigInt.zero()));
    this.set("openRedemptionExpiry", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DealFullyFunded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DealFullyFunded entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DealFullyFunded", id.toString(), this);
    }
  }

  static load(id: string): DealFullyFunded | null {
    return changetype<DealFullyFunded | null>(store.get("DealFullyFunded", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolAddress(): Bytes {
    let value = this.get("poolAddress");
    return value!.toBytes();
  }

  set poolAddress(value: Bytes) {
    this.set("poolAddress", Value.fromBytes(value));
  }

  get proRataRedemptionStart(): BigInt {
    let value = this.get("proRataRedemptionStart");
    return value!.toBigInt();
  }

  set proRataRedemptionStart(value: BigInt) {
    this.set("proRataRedemptionStart", Value.fromBigInt(value));
  }

  get openRedemptionStart(): BigInt {
    let value = this.get("openRedemptionStart");
    return value!.toBigInt();
  }

  set openRedemptionStart(value: BigInt) {
    this.set("openRedemptionStart", Value.fromBigInt(value));
  }

  get proRataRedemptionExpiry(): BigInt {
    let value = this.get("proRataRedemptionExpiry");
    return value!.toBigInt();
  }

  set proRataRedemptionExpiry(value: BigInt) {
    this.set("proRataRedemptionExpiry", Value.fromBigInt(value));
  }

  get openRedemptionExpiry(): BigInt {
    let value = this.get("openRedemptionExpiry");
    return value!.toBigInt();
  }

  set openRedemptionExpiry(value: BigInt) {
    this.set("openRedemptionExpiry", Value.fromBigInt(value));
  }
}

export class DepositDealToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("underlyingDealTokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("depositor", Value.fromBytes(Bytes.empty()));
    this.set("dealContract", Value.fromBytes(Bytes.empty()));
    this.set("underlyingDealTokenAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositDealToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositDealToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositDealToken", id.toString(), this);
    }
  }

  static load(id: string): DepositDealToken | null {
    return changetype<DepositDealToken | null>(
      store.get("DepositDealToken", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingDealTokenAddress(): Bytes {
    let value = this.get("underlyingDealTokenAddress");
    return value!.toBytes();
  }

  set underlyingDealTokenAddress(value: Bytes) {
    this.set("underlyingDealTokenAddress", Value.fromBytes(value));
  }

  get depositor(): Bytes {
    let value = this.get("depositor");
    return value!.toBytes();
  }

  set depositor(value: Bytes) {
    this.set("depositor", Value.fromBytes(value));
  }

  get dealContract(): Bytes {
    let value = this.get("dealContract");
    return value!.toBytes();
  }

  set dealContract(value: Bytes) {
    this.set("dealContract", Value.fromBytes(value));
  }

  get underlyingDealTokenAmount(): BigInt {
    let value = this.get("underlyingDealTokenAmount");
    return value!.toBigInt();
  }

  set underlyingDealTokenAmount(value: BigInt) {
    this.set("underlyingDealTokenAmount", Value.fromBigInt(value));
  }
}

export class WithdrawUnderlyingDealToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("underlyingDealTokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("depositor", Value.fromBytes(Bytes.empty()));
    this.set("dealContract", Value.fromBytes(Bytes.empty()));
    this.set("underlyingDealTokenAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WithdrawUnderlyingDealToken entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WithdrawUnderlyingDealToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WithdrawUnderlyingDealToken", id.toString(), this);
    }
  }

  static load(id: string): WithdrawUnderlyingDealToken | null {
    return changetype<WithdrawUnderlyingDealToken | null>(
      store.get("WithdrawUnderlyingDealToken", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingDealTokenAddress(): Bytes {
    let value = this.get("underlyingDealTokenAddress");
    return value!.toBytes();
  }

  set underlyingDealTokenAddress(value: Bytes) {
    this.set("underlyingDealTokenAddress", Value.fromBytes(value));
  }

  get depositor(): Bytes {
    let value = this.get("depositor");
    return value!.toBytes();
  }

  set depositor(value: Bytes) {
    this.set("depositor", Value.fromBytes(value));
  }

  get dealContract(): Bytes {
    let value = this.get("dealContract");
    return value!.toBytes();
  }

  set dealContract(value: Bytes) {
    this.set("dealContract", Value.fromBytes(value));
  }

  get underlyingDealTokenAmount(): BigInt {
    let value = this.get("underlyingDealTokenAmount");
    return value!.toBigInt();
  }

  set underlyingDealTokenAmount(value: BigInt) {
    this.set("underlyingDealTokenAmount", Value.fromBigInt(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("to", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class ClaimedUnderlyingDealToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("underlyingDealTokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("recipient", Value.fromBytes(Bytes.empty()));
    this.set("underlyingDealTokensClaimed", Value.fromBigInt(BigInt.zero()));
    this.set("dealAddress", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ClaimedUnderlyingDealToken entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ClaimedUnderlyingDealToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ClaimedUnderlyingDealToken", id.toString(), this);
    }
  }

  static load(id: string): ClaimedUnderlyingDealToken | null {
    return changetype<ClaimedUnderlyingDealToken | null>(
      store.get("ClaimedUnderlyingDealToken", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingDealTokenAddress(): Bytes {
    let value = this.get("underlyingDealTokenAddress");
    return value!.toBytes();
  }

  set underlyingDealTokenAddress(value: Bytes) {
    this.set("underlyingDealTokenAddress", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get underlyingDealTokensClaimed(): BigInt {
    let value = this.get("underlyingDealTokensClaimed");
    return value!.toBigInt();
  }

  set underlyingDealTokensClaimed(value: BigInt) {
    this.set("underlyingDealTokensClaimed", Value.fromBigInt(value));
  }

  get dealAddress(): Bytes {
    let value = this.get("dealAddress");
    return value!.toBytes();
  }

  set dealAddress(value: Bytes) {
    this.set("dealAddress", Value.fromBytes(value));
  }
}
